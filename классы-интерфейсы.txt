Serializable - метка-разрешение записи в файл

1. Сравнить ArrayList и LinkedList на трудоемкость следующих операций:
1) Добавление в голову;
2) Добавление в хвост;
3) Добавление в середину;
4) Удаление с головы;
5) Удаление с конца;
6) Удаление с середины;
Удаление из коллекции 
1 через итерар iterator.remove
2 for с конца

7) Взять элемент по индексу. О(1), O(n)

31*h + char -> hash для строки  
Comparable method compareTo
Comporator
new TreeSet<>(new Comporator<T>){
	@Override
	public int compare(T o1,T o2)
	{
		return ...
	}
}


2. Что вы знаете о коллекциях типа List? // очередность
3. Что вы знаете о коллекциях типа Set? // уникальность
4. (* на поиск информации) Что вы знаете о коллекциях типа Queue?
5. Назовите основные реализации List, Set, Map. 

ArrayList(массив, первоначальный размер 10 уелчивается в 1,5 раза не уменьшатся 
LinkedList

HashSet
LinkedHashSet
TreeSet


HashMap
LinkedHashMap
TreeMap


)
6. В чем отличия/сходства List и Set?
7. Что будет, если в Map положить два значения с одинаковым ключом?
8. Что такое Итератор, как его использовать?
9. Как правильно удалять элементы из коллекции, когда она перебирается в цикле?
10. Почему Map не наследуется от Collection?
11. Как реализован цикл foreach?
12. (* на поиск информации) Что такое хэшкод? Как он используется в HashMap/HashSet?
13. Какой тип данных могут хранить коллекции?
14. Что такое интерфейсы Comparator, Comparable и в чем их отличие, когда используются?
15. (* на поиск информации) Как отсортировать коллекцию с помощью класса Collections?

   






reflection, lamba джинерики

1. Крайне популярный вопрос на собеседованиях: Чем интерфейс отличается от абстрактного класса?

могут быть статические поля

2. Могут ли в абстрактном классе быть статические поля? +
3. Могут ли в интерфейсе быть нестатические поля?       -
4. Могут ли в интерфейсе быть нефинальные поля?         - 
5. Могут ли в интерфейсе быть нереализованные методы?   + 
6. Предположим, у нас есть метод foo(), который мы хотим оставить не реализованным, какое из следующих обозначений будет верно:
	abstr foo();
	abstract foo();
	notrealized foo();
	foo(){};
	void foo{};
	foo();

abstract void foo();
public - по умолчанию

7. Могут ли в абстрактном классе быть реализованные методы? +

8. Как обозначаются реализованные методы:
	notabstract
	realized
	void
	{};
	();

9. Можно ли создать экземпляр интерфейса? -

10. Можно ли создать экземпляр абстрактного класса? -
11. Могут ли в интерфейсе быть реализованные методы? - 
12. Какое из следующих выражений верно:
	Можно реализовать два интерфейса и отнаследоваться от одного абстрактного класса +
	Можно реализовать один интерфейс и отнаследоваться от двух абстрактных классов   - 
	Можно реализовать один интерфейс и отнаследоваться от одного обычного и одного абстрактного класса -


доступ к private полям и final локальным переменным
13. Можно ли создать экземпляр анонимного внутреннего класса? +

14. Можно ли создать потомка от анонимного внутреннего класса? -

15. Имеет ли смысл переопределять методы предка в анонимном внутреннем классе? +

16. Приведите классический пример использования анонимного внутреннего класса.

someButton.addActionListener.(new ActionListener() {
  @Override
  public void actionPerfom(ActionEvent event) 
  {
//
  }
});


17. Какое из следующих названий лучше всего подходит некоему интерфейсу?
	Clickers
	Clicker
	Clickable +
	Click
	ClickerInterface


18. У вас есть некоторый нижеприведённый набор классов, какие из них претендуют на то, чтобы быть интерфейсом, какие обычным классом, а какие абстрактным?
	Shape
	Circle
	Rectangle
	Resizeable
	BigCircle
	SmallCircle
	Moveable

19. Вы программируете упрощенный банкомат, и у вас есть некоторые требования к карточкам, которые будут в нем использоваться, в частности: чтобы можно было узнать остаток на карте, чтобы можно было списать часть средств с карты для выдачи наличными. Вы не знаете, какие карточки уже планируется использовать, и тем более не знаете, какие будут подключены в будущем. Но вам нужно как-то сделать программу банкомата универсальной. Как вы сформулируете свои требования?
	Напишите бумажную документацию
	Создадите класс. Если да, то какой?
	Создадите интерфейс. Если да, то какой?
	Создадите абстрактный класс. Если да, то какой?
	К черту требования! Универсальную программу написать невозможно
